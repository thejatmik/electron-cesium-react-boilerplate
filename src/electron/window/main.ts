import { BrowserWindow, ipcMain, Notification } from 'electron';
import * as remoteMain from '@electron/remote/main';

remoteMain.initialize()

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export const createMainWindow = (): BrowserWindow => {
  console.log(__dirname);
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1024,
    height: 720,
    webPreferences: {
      plugins: true,
      nodeIntegration: true,
      nodeIntegrationInSubFrames: true,
      contextIsolation: true,
      webSecurity: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  remoteMain.enable(mainWindow.webContents);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // TODO: add if isDev
  mainWindow.webContents.openDevTools();
  return mainWindow;
};

ipcMain.on("notify", (_, message) => {
  new Notification({ title: "Notification", body: message }).show();
});

export interface newWindowOption {
  width: number,
  height: number,
  url: string,
}

export const createNewWindow = (
  args:newWindowOption
): Electron.BrowserWindow => {
  const win = new BrowserWindow({
    width: args.width || 1024,
    height: args.height || 720,
    webPreferences: {
      plugins: true,
      nodeIntegration: true,
      contextIsolation: true,
      webSecurity: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  remoteMain.enable(win.webContents);

  args.url ?
    win.loadURL(args.url) :
    win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  return win;
}

ipcMain.on('create-new-window', (
  event: Electron.IpcMainEvent,
  args:newWindowOption
) => {
  createNewWindow(args);
});
